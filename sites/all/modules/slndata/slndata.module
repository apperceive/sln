<?php /**
 * @file
 * Drupal 7 version of slndata module.
 */
 
 
// require_once dirname(__FILE__) . '/../phpexcel/phpexcel.inc';
module_load_include('inc', 'phpexcel');

define('SLN_DATA_PATH', 'sites/default/files/slndata');

/**
 * Implements hook_menu.
 */
function slndata_menu() {
  $items = array();

  $items['slndata/test'] = array(
    'title' => 'Strategic Leader Network Survey Data Export',
    'page callback' => '_slndata_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    //'page arguments' => array(),
    // TODO: admin permision access?
    //'file' => 'slndata.pages.inc',
  );


  $items['slndata/export'] = array(
    'title' => 'Strategic Leader Network Survey Data Export',
    'page callback' => '_slndata_export_data',
    //'access callback' => TRUE,
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    //'page arguments' => array(''),
    // TODO: admin permision access?
    //'file' => 'slndata.pages.inc',
  );

  return $items;
}
 

// not part of a project, but maybe a link in project for quick export

// export to spread sheet (1?), export to many spread sheets?

// column headers - where can we set these? 
// set up mapping from survey form_keys (or cids?) to export

// global site settings form? defaults
// export form too
// select projects



 
function _slndata_export_data() {
  $s = views_embed_view('projects_listing', 'block_6');
  return $s;
}


 
function _slndata_test() {
  $filename = 'example.xls';
  $path = _slndata_testSingleWorksheetExport($filename);
  $s = l('example.xls', $path);
  return $s;
}

/**
* Test a simple, single worksheet Excel export.
*/
function _slndata_testSingleWorksheetExport($filename, $data = NULL, $headers = NULL) {

  /*
  if (!$headers)
    $headers = array('Header 1', 'Header 2');

  if (!$data)
    $data = array(
      array('Data 1.1111', 'Data 1.2222'),
      array('Data 22.11', 'Data 22.22'),
      array('Data 33.11', 'Data 33.22')
    );
  */
    
  if (!$headers)
    $headers = array(
      'Sheet 1' => array('Header 1.1', 'Header 1.2'),
      'Sheet 2' => array('Header 2.1', 'Header 2.2')
    );
    
  if (!$data)
    $data = array(
      'Sheet 1' => array(
        array('Data 1.1.1', 'Data 1.1.2'),
        array('Data 1.2.1', 'Data 1.2.2'),
        array('Data 1.3.1', 'Data 1.3.2')
      ),
      'Sheet 2' => array(
        array('Data 2.1.1', 'Data 2.1.2'),
        array('Data 2.2.1', 'Data 2.2.2'),
        array('Data 2.3.1', 'Data 2.3.2')
      ),
    );
    
  // TODO: create public://slndata
  // TODO: get filename (server vs download/local?)
  // in general use sites/default/files/slndata/data-$date.xls
  $path = file_create_filename($filename, SLN_DATA_PATH);
  phpexcel_export($headers, $data, $path);
  // phpexcel_export($headers, $data, $path, t('Exported data saved to !path', array('!path' => $path)));
  return $path;
}

// Views Bulk Operations development guide (Drupal 7)
// https://www.drupal.org/node/2052067
function slndata_action_info() {
  return array(
    'slndata_export_action' => array(
      'type' => 'node',
      'label' => t('Export project survey submission data'),
      'configurable' => TRUE,
      //'behavior' => array('changes_property'),
      'triggers' => array('any'),
      'vbo_configurable' => TRUE,
      'aggregate' => TRUE,
      'pass rows' => TRUE,
      // 'permissions' => array('access content', 'administer site configuration'),
    ),
  );
}

function slndata_export_action(&$projects, $context = array()) {
  
  $headers = array(/*'Project Type',*/ 'Submission ID', 'Submitted'/*, 'Modified'*/, 'Project ID', 'Survey ID', /*'Survey Title',*/ 'Survey Instrument', 'Survey Subject'/*, 'Completed'*/, 'Project Title', 'Subject', 'Participant',/*'Project',*/ 'Highest Degree', 'Ethnicity', 'Gender', 'Birth Year', 'Leaders Ranking');
  
  $cnt = 44;    // TODO: how calc - do not use utility function, it only checks for selects
  $effcnt = 10;
 // TODO: sanity check that all surveys are the same
  
  for ($i = 1; $i <= $cnt; $i++) 
    $headers[] = 'Q' . $i;

  for ($i = 1; $i <= $effcnt; $i++) 
    $headers[] = 'E' . $i;

  // demographic data common to all surveys at this time
  $democols = array('highest_degree', 'ethnicity', 'gender', 'birth_year', 'leaders_ranking');

  $data = array();  // excel data 
  // TODO: calculate stats too? counts, averages? place on separate sheet

  // cache survey nodes (there should be at most three for all projects and submissions)
  $surveys = array();
  
  // 
  foreach ($projects as $pnid => $project) {
    $ptitle = $project->title;
    $ptype = $project->field_project_type[LANGUAGE_NONE][0]['tid'];
    // TODO: subject token/email/name
    
    // TODO: refactor this to a util function?
    // do not cache plan? or make optional
    if (count($project->field_project_form_self)) {
      $snid = $project->field_project_form_self[LANGUAGE_NONE][0]['nid'];
      if ($snid && !array_key_exists($snid, $surveys))
        $surveys[$snid] = node_load($snid);
    }
    if (count($project->field_project_form_supervisor)) {
      $snid = $project->field_project_form_supervisor[LANGUAGE_NONE][0]['nid'];
      if ($snid && !array_key_exists($snid, $surveys))
        $surveys[$snid] = node_load($snid);
    }
    if (count($project->field_project_form_observer)) {
      $snid = $project->field_project_form_observer[LANGUAGE_NONE][0]['nid'];
      if ($snid && !array_key_exists($snid, $surveys))
        $surveys[$snid] = node_load($snid);
    }
    
    // get all project submissions (does this include plans?)
    $submissions = _slnsite_project_submissions($pnid);
    foreach ($submissions as $sid => $submission) {
      $snid = $submission->nid;
      // todo: this can be either 1 or a date if completed - uniformize to date
      $completed = $submission->completed ? 1 : 0;
      $modified = $submission->modified ? date("Y-m-d", $submission->modified) : '';
      $submitted = date("Y-m-d", $submission->submitted);
      
      // TODO: get subject (name, mail, token) - consider 180 - note: token is already in submission
      
      // verify that survey is cached (so ignore plans automatically since they are not in cache)
      if (array_key_exists($snid, $surveys)) {
        $surveynode = $surveys[$snid];
        $stitle = $surveynode->title;
        $sinstrument= _slnsite_survey_instrument_name($surveynode->nid);
        $ssubject = _slnsite_survey_subject_name($surveynode->nid);
        $ssubject3 = strtolower(($ssubject == 'Self') ? 'self' : substr($ssubject, 0, 3));  // for eff_
        $sub_project_id = _slnsite_submission_data('sln_project_id', $submission, $surveynode, -1);
        $sub_participant_id = _slnsite_submission_data('sln_participant_id', $submission, $surveynode, -1);
        $sub_subject_id = _slnsite_submission_data('sln_subject_id', $submission, $surveynode, -1);
        
        // TODO: report errors? skip for now
        // todo: what does a row of missing data mean when survey is complete? (we have only 1 of these)
        if (($sub_project_id == -1) || ($sub_project_id != $pnid) || !$completed)
          continue;

        // if (1) add new column param, then (2) add new title to header
        $row = array(/*$ptype,*/ $sid, $submitted/*, $modified*/, $pnid, $snid, /*$stitle,*/ $sinstrument, $ssubject, /*$completed,*/ $ptitle, $sub_subject_id, $sub_participant_id/*, $sub_project_id*/);
        
        $demodata = array();
        foreach ($democols as $democol) 
          $demodata[] = _slnsite_submission_data($democol, $submission, $surveynode, '');

        // TODO: Use instrument for independence from slq
        // TODO: OPTION: look up data value
        $qdata = array();
        for ($i = 1; $i <= $cnt; $i++) 
          $qdata[] = _slnsite_submission_data(strtolower($sinstrument) . '_' . $i, $submission, $surveynode, '');
        
        $effdata = array();
        for ($i = 1; $i <= $effcnt; $i++) 
          $effdata[] = _slnsite_submission_data("eff_${ssubject3}_$i", $submission, $surveynode, '');

        $data[] = array_merge($row, $demodata, $qdata, $effdata);
      }
      // TODO: else error? report this?
    }
      
  }
  
  
  //$path = 'not set';
  $date = date("Y-m-d");
  $filename = "sln360data-$date.xls";
  $path = _slndata_testSingleWorksheetExport($filename, $data, $headers);
  
  //dpm(get_defined_vars());

  // how display link to xls on results page other than via set message?
  // todo: add instrument and date to file name
  drupal_set_message( t('Exported data to file !l. Right click on link to download and save.', array('!l' => l($filename, $path))) );
  
  $filePath = $path;
  if(file_exists($filePath)) {
    //$fileName = basename($filePath);
    //$fileSize = filesize($filePath);

    // Output headers.
    //header("Cache-Control: private");
    //header("Content-Type: application/stream");
    //header("Content-Length: ".$fileSize);
    //header("Content-Disposition: attachment; filename=".$fileName);
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header("Content-Disposition: attachment;filename='$filename'");
    header('Cache-Control: max-age=0');
    // Output file.
    readfile ($filePath);                   
    exit();
  }
  else {
    // drupal_set_message("An error orccured attempting to access export file: $filePath");
  }  
  
  // todo: remove old file? do it in cron?
  // return?
}

// this form shows inside the view's settings for a vbo field if this action checked
function slndata_export_action_views_bulk_operations_form($options) {
  $form = array();
  $form['fmt'] = array(
    '#type' => 'select', 
    '#title' => t('Choose an export format'),
    '#options' => array(
      'Excel' => t('Excel'),
      'CSV' => t('CSV'),
    ),
    '#default_value' => !empty($options['fmt']) ? $options['fmt'] : '',
  );
  
  return $form;
}

// vbo form displayed after selection and before confirmation form
// note on params:
// https://www.drupal.org/node/2052067#comment-10675488
function slndata_export_action_form($settings, &$form_state) {
  $form = array();
  $form['fmt'] = array(
    '#type' => 'select', 
    '#title' => t('Choose an export format'),
    '#options' => array(
      'Excel' => t('Excel'),
      'CSV' => t('CSV'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['fmt']) ? $settings['settings']['fmt'] : '',
  );
  return $form;
}

function slndata_export_action_submit($form, $form_state) {
  $return = array(); 
  //$return['hero'] = $form_state['values']['hero'];
  return $return; //Note, return value here must be an array.
}

function slndata_export_action_validate($form, $form_state) {

}

/**
 * Perform alterations on the VBO form before it is rendered.
 *
 * Usually, if a module wanted to alter the VBO form through hook_form_alter(),
 * it would need to duplicate the views form checks from
 * views_bulk_operations_form_alter(), while making sure that the hook
 * runs after VBO's hook (by increasing the weight of the altering module's
 * system entry). In order to reduce that complexity, VBO provides this hook.
 *
 * @param $form
 *  A step of the VBO form to be altered.
 * @param $form_state
 *  Form state. Contains the name of the current step in $form_state['step'].
 * @param $vbo
 *   The VBO views field. Contains a reference to the view in $vbo->view.
 */
function slndata_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($form_state['step'] == 'views_form_views_form') {
    // Alter the first step of the VBO form (the selection page).
    $form['select']['#title'] = t('SLN Data Export');
  }
  elseif ($form_state['step'] == 'views_bulk_operations_config_form') {
    // Alter the configuration step of the VBO form.
  }
  elseif ($form_state['step'] == 'views_bulk_operations_confirm_form') {
    // Alter the confirmation step of the VBO form.
  }
}

